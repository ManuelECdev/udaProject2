Description: >
    Manuel Eiras Casal / Udacity
    This template deploys a launch configuration for the web servers, the autoscaling group, the associated security group and  the IAM role that allows 
    the ec2 instances get access to the web app source code in S3.
    It also deploys a LoadBalancer , the listener, the listener rule, the associated security group  and the target group associated to the autoscaling group.
    It also deploys a bastion box.
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"

    WebServerPort80SecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Security Group Rule for webserver to loadbalancers 
        GroupId: !Ref WebServerSecGroup
        IpProtocol: tcp 
        FromPort: 80 
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecGroup

    WebServerPort22SecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Security Group Rule for webserver to loadbalancers 
        GroupId: !Ref WebServerSecGroup
        IpProtocol: tcp 
        FromPort: 22 
        ToPort: 22
        SourceSecurityGroupId: !Ref LBSecGroup

    UdacityS3ReadOnlyEC2:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess


    ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Roles:
          - !Ref UdacityS3ReadOnlyEC2

        
    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip
        ImageId: ami-0ba60995c1589da9d
        SecurityGroups:
        - !Ref WebServerSecGroup
        InstanceType: t3.small
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
          
    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          !Ref WebAppLaunchConfig
        MinSize: "4"
        MaxSize: "4"
        TargetGroupARNs:
        - !Ref WebAppTargetGroup


    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"

    LBPort80SecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Security Group Rule for loadbalancers to  webservers 
        GroupId: !Ref LBSecGroup
        IpProtocol: tcp 
        FromPort: 80 
        ToPort: 80
        CidrIp: 0.0.0.0/0

    LBPort80SecurityGroupEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        Description: Security Group Rule for loadbalancers to  webservers 
        GroupId: !Ref LBSecGroup
        IpProtocol: tcp 
        FromPort: 80 
        ToPort: 80
        SourceSecurityGroupId: !Ref WebServerSecGroup

    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            !Ref WebAppTargetGroup
        LoadBalancerArn:
          !Ref WebAppLB
        Port: '80'
        Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref WebAppTargetGroup
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref Listener
          Priority: 1

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

    bastionBoxSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow SSH from internet
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

    bastionBox:
      Type: AWS::EC2::Instance
      Properties:
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        SubnetId:           
          Fn::ImportValue:
            !Sub "${EnvironmentName}-PUB1-SN"
        ImageId: ami-0841edc20334f9287
        InstanceType: t2.micro
        SecurityGroupIds:
        - !GetAtt bastionBoxSecGroup.GroupId
        BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8

Outputs: 


    webAppUrl: 
        Description: A reference to the created LB url
        Value: !Join [ "", [ http://, !GetAtt WebAppLB.DNSName] ] 
        Export:
          Name: !Sub ${EnvironmentName}-APP-URL